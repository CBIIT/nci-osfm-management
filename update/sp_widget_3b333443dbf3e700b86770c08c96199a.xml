<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[function($scope, $q, spUtil, $timeout, $log, $http, etrackAddAssets, $mdDialog, $state, ETrackingUtil) {
	/* widget controller */
	var c = this;
	$scope.form = {userId: ""};
	$scope.backPageId = ETrackingUtil.getBackPage('Assets');

	c.form = getFormValues();
	c.data.existingModels = loadAllModels();
	c.querySearch = querySearch;
	c.selectedItemChange = selectedItemChange;
	c.data.addManufacturer = '';
	c.selectedItem = null;
	c.curModel = null;
	c.nameErrMsg = "";

	$scope.enableEdit = function(){
		if(c.selectedItem){
			return false;
		}
		return true;
	}

	function getStockroomName(){
		var name = "";
		c.data.stockrooms.map(function(item){ if(item.id == c.form.stockroom){name = item.name}});
		return name;
	}
	
	$scope.$watch('c.form.name', function(){
		if(c.selectedItem == null && c.form.name != "" && c.form.name != null){
			c.data.existingModels.map(function(item){
				if(item.value.trim().toLowerCase() == c.form.name.trim().toLowerCase()){
					c.nameErrMsg = "'"+c.form.name+ "' already exist. " 
					c.form.name = "";
					
				}
			})
		}
	});


	/*--------- Type header -----------*/

	$("#ownerName").autocomplete({
		delay: 300,
		source: function(request, response) {
			$('.ui-autocomplete').css('display', 'block');
			var term = $('#ownerName').val();
			c.form.ownerId = "";
			response([]);
			if (term.length < 4) {
				return;
			}
			var temp = '';
			if (term.indexOf(',') >= 0) {
				temp = term.split(',');
				var length = temp.length;
				if (length > 1) {
					term = temp[1].trim() + " " + temp[0].trim();
				} else {
					term = temp[0];
				}
			}
			var req = {
				method: 'GET',
				url: '/api/x_naci_account_act/accountactivationscoped/fetchUserList',
				beforeSend: function(xhr) {
					xhr.setRequestHeader('X-UserToken', window.g_ck);
				},
				headers: {
					'Content-Type': 'application/json'
				},
				params: {
					'term': term
				}
			};
			$http(req).then(handleResponse, handleError);

			function handleResponse(responseData) {
				var result = responseData.data.result;
				response(result);
			}

			function handleError(response) {
				console.error(response);
				alert('ERROR');
			}
		},
		autoFocus: true,
		select: function(event, ui) {


			var sys_id = ui.item.id;
			var name = ui.item.value;
			if (sys_id != null && sys_id.trim().length > 1) {
				$scope.form.userId = sys_id;
			} else {
				$scope.form.userId = "";
			}
			if (sys_id != null && sys_id.trim().length > 1) {

				c.form.owner = name;
				c.form.ownerId = sys_id;
			} else {
				c.form.owner = "";
				c.form.ownerId = "";
			}

			//$('#content').css('height', '550px');
			$scope.$apply();
		}
	});



	/*---------Search Model Name-----------*/

	/**
			 * Search for model names
			 */
	function querySearch(query) {
		var results = query ? c.data.existingModels.filter(createFilterFor(query)) : c.data.existingModels,
				deferred;
		if (c.simulateQuery) {
			deferred = $q.defer();
			$timeout(function() {
				deferred.resolve(results);
			}, Math.random() * 1000, false);
			return deferred.promise;
		} else {
			return results;
		}
	}

	function selectedItemChange(item) {
		if (item == null){
			Object.assign(c.form,{
				name: "",
				manufacture: "",
				description:"",
				model_number:"",
				unit_cost: ""
			});
		}else{
			updateFromValues(item.data);
			c.curModel = item.data;
		}

	}	

	/**
			 * Build `models` list of key/value pairs
			 */
	function loadAllModels() {
		temp = [];
		c.data.models.forEach(function(item){
			temp.push({
				value: item.name.toLowerCase(),
				display: item.name,
				data: item
			})
		});
		return temp;
	}

	/**
			 * Create filter function for a query string
			 */
	function createFilterFor(query) {
		var lowercaseQuery = query.toLowerCase();
		return function filterFn(barcode) {
			return (barcode.value.indexOf(lowercaseQuery) === 0);
		};


	}


	/*---------Form-----------*/

	function updateFromValues(updateForm){
		Object.assign(c.form,{
			name: updateForm.name,
			manufacture: updateForm.manufactureID,
			description:updateForm.description,
			model_number:updateForm.modelNumber,
			unit_cost: parseInt(updateForm.unitCost)
		});
	}

	function getFormValues() {
		return {
			name: "",
			manufacture: "",
			description: "",
			model_number: "",
			unit_cost: "",
			owner_custodian: "",
			quantity: "",
			stockroom: "",
			barcode: "",
			asset_type: ""
		}
	}


	/*--------- clear barcode if quantity is greater then 1 ----------- */
	$scope.$watch('c.form.quantity', function(){
		if(c.form.quantity > 1){
			c.form.barcode = "";
		}
	});

	$scope.$watch('c.form.owner', function(){
		if(c.form.ownerId == "" || c.form.ownerId == null){
			c.form.owner = "";
		}
	});

	/**
		* Check if model is being updated
		*/
	/**
		function modelUpdated(){
			if( c.form.manufacture != c.curModel.manufactureID || 
				 c.form.unit_cost != c.curModel.unitCost || 
				 c.form.description != c.curModel.description || 
				 c.form.model_number != c.curModel.modelNumber){
				return true
			}
			return false;
		}
	*/

	/*---------------- Add manufacture ----------------- */

	function manufacturerExist(result){
		var check = false;
		c.data.manufactures.map(function(item){
			if(item.name.toLowerCase().trim() == result.toLowerCase().trim()){
				check = true;
			}
		});
		return check;
	}

	$scope.addManufacturer = function(ev){
		// Appending dialog to document.body to cover sidenav in docs app
		var confirm = $mdDialog.prompt()
		.title('Add Manufacturer' + c.data.addManufacturer)
		.textContent('Please enter a manufacturer name')
		.placeholder('')
		.ariaLabel('add manufacturer')
		.initialValue('')
		.targetEvent(ev)
		.required(true)
		.ok('Update!')
		.clickOutsideToClose(true)
		.cancel('Cancel');
		$mdDialog.show(confirm).then(function(result) {
			if(manufacturerExist(result)){
				$mdDialog.show(
					$mdDialog.alert()
					.parent(angular.element(document.querySelector('#popupContainer')))
					.clickOutsideToClose(true)
					.title(result +" already exist")
					.ok('OK')
				);
			}else{
				c.form.method = "addManufacturer";
				c.form.manufactureToAdd = result;
				etrackAddAssets.proccessModel(c.form).then(function(res){
					$mdDialog.show(
						$mdDialog.alert()
						.parent(angular.element(document.querySelector('#popupContainer')))
						.clickOutsideToClose(true)
						.title("Manufacturer updated!")
						.ok('OK')
					);
					c.form.manufacture = res.data.result;
				}, function(err){alert("ERROR");});
			}
		});
	};
	/*--------- POST add asset-----------*/

	function barcodeExist(){
		c.form.method = "checkBarcode";
		return etrackAddAssets.proccessModel(c.form).then(function(res){
			if(res.data.result == "1"){
				return true;
			}else{
				return false;
			}
		}, function(err){
			$log.log(err);
			alert("ERROR");
		});
	}

	$scope.addAsset = function(){
		if(c.form.ownerId == "" || c.form.ownerId == null){
			c.form.owner = "";
			return;
		}
		/*------  check if barcode exist ------*/
		barcodeExist().then(function(exists) {
			if(exists) {
				$mdDialog.show(
					$mdDialog.alert()
					.parent(angular.element(document.querySelector('#popupContainer')))
					.clickOutsideToClose(true)
					.htmlContent("<h4>Barcode: <b>"+c.form.barcode+"</b> is already being used by another asset</h4>" + 
											 "Please enter a unique barcode for this asset.")
					.ok('OK')
				);
				return;
			} else {
				/*------ insert new asset if the barcode does not exist ------*/
				insertAsset();
			}
		})
	}

	function insertAsset(){
		c.form.method = "checkAsset";
		etrackAddAssets.proccessModel(c.form).then(function(res){
			if (res.data.result == "0"){
				var confirm = $mdDialog.confirm()
				.htmlContent('<h4>Are you sure you want to add <b>'+c.form.quantity+'</b> <b>'+c.form.name+'</b>(s) into <b>'+getStockroomName()+'</b>?</h4>')
				.ok('YES')
				.cancel('NO');
				$mdDialog.show(confirm).then(function() {
					insertModel("insert", c.form.name + ' has been updated successfully!');
					$state.go("assets")
				}, function() {

				});

				//insertModel("insert", "Assest(s) have been created successfully!");
				//$state.go("assets")
			}else{
				var assetId = res.data.result
				var confirm = $mdDialog.confirm()
				.htmlContent('<h4><b>'+ getStockroomName() +'</b>'+ ' already contain <b>'+  c.form.name +'</b></h4>' +
										 "<p>If you would like to update the asset information, please do so on the asset details page.</p>")
				.ok('Edit Asset')
				.cancel('Cancel');
				$mdDialog.show(confirm).then(function() {
					$state.go("edit_asset", {id:assetId});
				}, function() {

				});

				/**
					if(modelUpdated()){
						var confirm = $mdDialog.confirm()
						.title('Are you sure you want to update it? ')
						.htmlContent("<strong>" + c.form.name + " </strong>already exists, if you choose to update, the model number and manufacturer will be updated")
						.ok('YES')
						.cancel('NO');
						$mdDialog.show(confirm).then(function() {
							insertModel("update", c.form.name + ' has been updated successfully!');
							$state.go("assets")
						}, function() {
						});
					}else{
						var confirm = $mdDialog.confirm()
						.title('Are you sure you want to add these Assets?')
						.ok('YES')
						.cancel('NO');
						$mdDialog.show(confirm).then(function() {
							insertModel("update", c.form.name + ' has been updated successfully!');
							$state.go("assets")
						}, function() {});
					}*/


			}
			$log.log(res);
		}, function(err){
			$log.log(err);
			alert("ERROR");
		});
	}

	function insertModel(method, msg){
		c.form.method = method;
		etrackAddAssets.proccessModel(c.form).then(function(res){
			$mdDialog.show(
				$mdDialog.alert()
				.parent(angular.element(document.querySelector('#popupContainer')))
				.clickOutsideToClose(true)
				.title(msg)
				.ok('OK')
			);

			$log.log(res.data.result);
		}, function(err){
			$log.log(err);
			alert("ERROR");
		});
	}

	$scope.doTheBack = function() {
		window.history.back();
	};

	spUtil.recordWatch($scope, "x_naci_e_tracking_manufacture", "", function(name, data) {  
		spUtil.update($scope);
	});

}]]></client_script>
        <controller_as>c</controller_as>
        <css>
.md-errors-spacer { display: none; }</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>false</has_preview>
        <id>etrack_add_assets</id>
        <internal>false</internal>
        <link/>
        <name>Etrack Add Assets</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {
	var user = gs.getUser();

	data.isLoggedIn = gs.getSession().isLoggedIn();
	data.models = [];
	data.manufactures = [];
	data.stockrooms = [];
	data.asset_type = ["Physical Security", "Emergency Preparedness"];
	data.admin = gs.getUser().isMemberOf("ETracking_Admin")

	
	var model = new GlideRecord("x_naci_e_tracking_model");
	model.orderBy("name");
	model.query();
	while(model.next()){
		data.models.push({
			id: model.sys_id.toString(),
			name:  model.name.toString(),
			manufacture:model.manufacture.name.toString(),
			manufactureID:model.manufacture.sys_id.toString(),
			description: model.description.toString(),
			modelNumber:  model.model_number.toString(),
			unitCost: model.cost.toString()
		});
	}


	var manufacture = new GlideRecord('x_naci_e_tracking_manufacture');
	manufacture.orderBy("name");
	manufacture.query();
	while(manufacture.next()){
		item = {};
		item.id = manufacture.sys_id.toString();
		item.name = manufacture.name.toString();
		data.manufactures.push(item);
	}

	var stockroom = new GlideRecord('x_naci_e_tracking_stock_room');
	stockroom.orderBy("name");
	stockroom.query();
	while(stockroom.next()){
		item = {};
		item.id = stockroom.sys_id.toString();
		item.name = stockroom.name.toString();
		data.stockrooms.push(item);
	}
})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>abdullahz2@nih.gov</sys_created_by>
        <sys_created_on>2019-02-27 15:57:17</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>3b333443dbf3e700b86770c08c96199a</sys_id>
        <sys_mod_count>604</sys_mod_count>
        <sys_name>Etrack Add Assets</sys_name>
        <sys_package display_value="NCI Equipment Tracking System" source="x_naci_e_tracking">0d1eac28dbbfaf0054d8ff621f9619b2</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="NCI Equipment Tracking System">0d1eac28dbbfaf0054d8ff621f9619b2</sys_scope>
        <sys_update_name>sp_widget_3b333443dbf3e700b86770c08c96199a</sys_update_name>
        <sys_updated_by>abdullahz2@nih.gov</sys_updated_by>
        <sys_updated_on>2019-04-12 15:42:30</sys_updated_on>
        <template><![CDATA[<div ng-controller="c" ng-cloak ng-show="c.data.admin">
  <md-card>
    <md-toolbar>
      <div class="md-toolbar-tools">
        <h2 flex md-truncate>Add Assets</h2>
      </div>
    </md-toolbar>
    <md-subheader class="md-primary">If the Model exist, please select one. Otherwise a new model will be created for this asset.</md-subheader>
    <md-card-content>
      <form name="modelForm" autocomplete="off">
        <label>Search existing Model</label>
        <md-autocomplete 
                         md-selected-item="c.selectedItem"
                         md-search-text="c.searchText" 
                         md-selected-item-change="c.selectedItemChange(item)" 
                         md-items="item in c.querySearch(c.searchText)" 
                         md-item-text="item.display"
                         md-min-length="0" 
                         placeholder="Enter model name" 
                         input-aria-labelledby="favoriteStateLabel" 
                         input-aria-describedby="autocompleteDetailedDescription">
          <md-item-template>
            <span md-highlight-text="c.searchText" md-highlight-flags="^i">{{item.display}}</span>
          </md-item-template>
          <md-not-found>
            No assets name matching "'{{c.searchText}}'" were found.
          </md-not-found>
        </md-autocomplete>

        <br>

        <h4>
          Model Information
        </h4>
        <div layout="column" ng-class="{'disabledForm': !enableEdit()}">
          <br>
          <md-input-container class="md-block" flex-gt-sm>
            <label>Name</label>
            <input ng-required="true" name="name" ng-model="c.form.name"  ng-disabled="!enableEdit()" ng-model-options="{ updateOn: 'blur' }"/>
            <div ng-messages="modelForm.name.$error">
              <div ng-message="required">
                {{c.nameErrMsg}}Please enter a unqiue model name. 
              </div>
            </div>
          </md-input-container>


          <md-input-container class="md-block" flex-gt-sm>
            <label>Manufacture</label>
            <md-select ng-required="true" ng-model="c.form.manufacture"  ng-disabled="!enableEdit()">
              <md-option ng-repeat="manufacture in c.data.manufactures" value="{{manufacture.id}}">
                {{manufacture.name}}
              </md-option>
              <md-option ng-click="addManufacturer($event)">
                <a>
                  Add manufacturer
                </a>
              </md-option>
            </md-select >
          </md-input-container>

          <md-input-container class="md-block">
            <label>Description</label>
            <textarea ng-model="c.form.description" ng-required="true" md-select-on-focus  ng-disabled="!enableEdit()"></textarea>
          </md-input-container>

          <md-input-container class="md-block" flex-gt-sm>
            <label>Model Number</label>
            <input name="model_number" ng-model="c.form.model_number" ng-disabled="!enableEdit()"/>
          </md-input-container>

          <md-input-container class="md-block" flex-gt-sm>
            <label>Unit Cost</label>
            <input type="number" step="any" ng-required="true" min="0" name="unit_cost" ng-model="c.form.unit_cost"  ng-disabled="!enableEdit()"/>
          </md-input-container>
        </div>
      </form>

      <!------------------------------------->
      <form name="userForm" autocomplete="off">
        <div layout="column">
          <h4>
            Asset Information
          </h4>


          <md-input-container class="md-block" flex-gt-sm>
            <label>Owner</label>
            <input id="ownerName" ng-required="true" name="stopAC" ng-model="c.form.owner"  ng-model-options="{ updateOn: 'blur' }" />
            <div ng-messages="userForm.stopAC.$error">
              <div ng-message="required">
                Please select a valid owner
              </div>
            </div>
          </md-input-container>

          <md-input-container class="md-block" flex-gt-sm>
            <label>Type</label>
            <md-select ng-required="true" ng-model="c.form.asset_type">
              <md-option ng-repeat="type in c.data.asset_type" value="{{type}}">
                {{type}}
              </md-option>
            </md-select >
          </md-input-container>

          <md-input-container class="md-block" flex-gt-sm>
            <label>Quantity</label>
            <input type="number" step="any" ng-required="true" name="quantity" ng-model="c.form.quantity" min="1" ng-model-options="{ updateOn: 'blur' }"/>
            <div ng-messages="userForm.quantity.$error">
              <div ng-message="min">
                Must be greater then 1
              </div>
            </div>
          </md-input-container>


          <md-input-container ng-show="c.form.quantity == 1" class="md-block" flex-gt-sm>
            <label>Barcode</label>
            <input id="barcode" name="barcode" ng-model="c.form.barcode" ng-disabled="c.form.quantity > 1"/>
            <div class="hint" style="font-size: 80%; color: #004A70;">Please leave this field empty if there is no barcode</div>
          </md-input-container>


          <md-input-container class="md-block" flex-gt-sm>
            <label>Stockroom</label>
            <md-select ng-required="true" ng-model="c.form.stockroom">
              <md-option ng-repeat="stockroom in c.data.stockrooms" value="{{stockroom.id}}">
                {{stockroom.name}}
              </md-option>
            </md-select >
          </md-input-container>


        </div>
        <br>
        <div class="d-flex justify-content-center">
          <md-button
                     type="submit" 
                     ng-disabled="userForm.$invalid" 
                     ng-click="userForm.$valid && addAsset()" 
                     class="md-raised md-primary">Submit</md-button>
          <!--md-button ng-href="#!/{{backPageId}}" class="md-raised">Cancel</md-button-->
          <md-button ng-click="doTheBack()" class="md-raised">Cancel</md-button>

        </div>
      </form>





    </md-card-content>
  </md-card>  
</div>]]></template>
    </sp_widget>
</record_update>
